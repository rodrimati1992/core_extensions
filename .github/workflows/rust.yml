name: Rust

on: [push, pull_request]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix: 
        rust: [stable, beta, nightly, 1.41.0, 1.46.0, 1.51.0, 1.59.0, 1.61.0]

    steps:
    - name: enable-rust-1-46
      if: matrix.rust == '1.46.0'
      run: echo "rustv=rust_1_46" >> $GITHUB_ENV

    - name: enable-rust-1-51
      if: matrix.rust == '1.51.0'
      run: echo "rustv=rust_1_51" >> $GITHUB_ENV

    - name: enable-rust-1-59
      if: matrix.rust == '1.59.0'
      run: echo "rustv=rust_1_59" >> $GITHUB_ENV

    - name: enable-rust-stable
      if: matrix.rust == 'stable' || matrix.rust == 'beta' || matrix.rust == 'nightly'
      run: echo "rustv= __test rust_latest_stable" >> $GITHUB_ENV

    - name: prelude
      run: echo "rustv= __test_older ${{env.rustv}}" >> $GITHUB_ENV

    - uses: actions/checkout@v2
    - name: ci-all-versions
      run: |
        rustup override set ${{ matrix.rust }}
        cargo -V
        cd "${{github.workspace}}/core_extensions_proc_macros"
        cargo test --features item_parsing
        cargo test --features item_parsing derive

        cd "${{github.workspace}}/"
        cargo test --no-default-features --features "${{ env.rustv }} std derive"
        cargo test --no-default-features --features "${{ env.rustv }} std bools"
        cargo test --no-default-features --features "${{ env.rustv }} std callable"
        cargo test --no-default-features --features "${{ env.rustv }} std collections"
        cargo test --no-default-features --features "${{ env.rustv }} std const_default"
        cargo test --no-default-features --features "${{ env.rustv }} std const_default derive"
        cargo test --no-default-features --features "${{ env.rustv }} std const_val"
        cargo test --no-default-features --features "${{ env.rustv }} std macro_utils"
        cargo test --no-default-features --features "${{ env.rustv }} std generics_parsing"
        cargo test --no-default-features --features "${{ env.rustv }} std item_parsing"
        cargo test --no-default-features --features "${{ env.rustv }} std integers"
        cargo test --no-default-features --features "${{ env.rustv }} std iterators"
        cargo test --no-default-features --features "${{ env.rustv }} std marker_type"
        cargo test --no-default-features --features "${{ env.rustv }} std on_drop"
        cargo test --no-default-features --features "${{ env.rustv }} std option_result"
        cargo test --no-default-features --features "${{ env.rustv }} std phantom"
        cargo test --no-default-features --features "${{ env.rustv }} std self_ops"
        cargo test --no-default-features --features "${{ env.rustv }} std slices"
        cargo test --no-default-features --features "${{ env.rustv }} std strings"
        cargo test --no-default-features --features "${{ env.rustv }} std transparent_newtype"
        cargo test --no-default-features --features "${{ env.rustv }} std transparent_newtype derive"
        cargo test --no-default-features --features "${{ env.rustv }} std type_asserts"
        cargo test --no-default-features --features "${{ env.rustv }} std type_identity"
        cargo test --no-default-features --features "${{ env.rustv }} std type_level_bool"
        cargo test --no-default-features --features "${{ env.rustv }} std void"

        cargo test --no-default-features --features "${{ env.rustv }} all_items"
        cargo test --no-default-features --features "${{ env.rustv }} alloc all_items"
        cargo test --no-default-features --features "${{ env.rustv }} std all_items"

        cargo test --no-default-features --features "${{ env.rustv }} all_items_no_derive"
        cargo test --no-default-features --features "${{ env.rustv }} alloc all_items_no_derive"
        cargo test --no-default-features --features "${{ env.rustv }} std all_items_no_derive"

        cargo test --release --no-default-features --features "${{ env.rustv }} all_items";
        cargo test --release --no-default-features --features "${{ env.rustv }} alloc all_items";
        cargo test --release --no-default-features --features "${{ env.rustv }} std all_items";

        cargo test --release --no-default-features --features "${{ env.rustv }} all_items_no_derive";
        cargo test --release --no-default-features --features "${{ env.rustv }} alloc all_items_no_derive";
        cargo test --release --no-default-features --features "${{ env.rustv }} std all_items_no_derive";

  nightly-tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: ci-nighly
      run: |
        MIRI_NIGHTLY=nightly-$(curl -s https://rust-lang.github.io/rustup-components-history/x86_64-unknown-linux-gnu/miri)
        echo "Installing latest nightly with Miri"
        echo "$MIRI_NIGHTLY"
        rustup set profile minimal
        rustup default "$MIRI_NIGHTLY"
        rustup override set "$MIRI_NIGHTLY"
        rustup component add miri
        cargo miri setup
        cargo miri test --features "__test serde all_items rust_latest_stable"

        rm Cargo.lock
        cargo clean

        cargo update -Z minimal-versions
        cargo build --all-features

        cargo update
        cargo build --all-features
        
        cargo test --features "__test serde all_items rust_latest_stable"
