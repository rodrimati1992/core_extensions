name: Rust

on: [push, pull_request]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix: 
        rust: [stable, beta, nightly, 1.41.0, 1.46.0]



    steps:
    - name: enable-rust-1-46
      if: matrix.rust != '1.41.0'
      run: echo "rust146=rust_1_46" >> $GITHUB_ENV

    - uses: actions/checkout@v2
    - name: ci-all-versions
      run: |
        rustup override set ${{ matrix.rust }}
        cargo -V
        cd "${{github.workspace}}/core_extensions_proc_macros"
        cargo test

        cd "${{github.workspace}}/"
        cargo test --no-default-features --features "${{ env.rust146 }} std bools"
        cargo test --no-default-features --features "${{ env.rust146 }} std callable"
        cargo test --no-default-features --features "${{ env.rust146 }} std collections"
        cargo test --no-default-features --features "${{ env.rust146 }} std const_default"
        cargo test --no-default-features --features "${{ env.rust146 }} std const_val"
        cargo test --no-default-features --features "${{ env.rust146 }} std macro_utils"
        cargo test --no-default-features --features "${{ env.rust146 }} std generics_parsing"
        cargo test --no-default-features --features "${{ env.rust146 }} std item_parsing"
        cargo test --no-default-features --features "${{ env.rust146 }} std integers"
        cargo test --no-default-features --features "${{ env.rust146 }} std iterators"
        cargo test --no-default-features --features "${{ env.rust146 }} std marker_type"
        cargo test --no-default-features --features "${{ env.rust146 }} std on_drop"
        cargo test --no-default-features --features "${{ env.rust146 }} std option_result"
        cargo test --no-default-features --features "${{ env.rust146 }} std phantom"
        cargo test --no-default-features --features "${{ env.rust146 }} std self_ops"
        cargo test --no-default-features --features "${{ env.rust146 }} std slices"
        cargo test --no-default-features --features "${{ env.rust146 }} std strings"
        cargo test --no-default-features --features "${{ env.rust146 }} std transparent_newtype"
        cargo test --no-default-features --features "${{ env.rust146 }} std type_asserts"
        cargo test --no-default-features --features "${{ env.rust146 }} std type_identity"
        cargo test --no-default-features --features "${{ env.rust146 }} std type_level_bool"
        cargo test --no-default-features --features "${{ env.rust146 }} std void"

        cargo test --no-default-features --features "${{ env.rust146 }} all_items"
        cargo test --no-default-features --features "${{ env.rust146 }} alloc all_items"
        cargo test --no-default-features --features "${{ env.rust146 }} std all_items"

  nightly-tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: ci-nighly
      run: |
        MIRI_NIGHTLY=nightly-$(curl -s https://rust-lang.github.io/rustup-components-history/x86_64-unknown-linux-gnu/miri)
        echo "Installing latest nightly with Miri"
        echo "$MIRI_NIGHTLY"
        rustup set profile minimal
        rustup default "$MIRI_NIGHTLY"
        rustup override set "$MIRI_NIGHTLY"
        rustup component add miri
        cargo miri setup
        cargo miri test --features "serde all_items rust_1_51"

        rm Cargo.lock
        cargo clean

        cargo update -Z minimal-versions
        cargo build --all-features

        cargo update
        cargo build --all-features
        
        cargo test --features "serde all_items rust_1_51"
